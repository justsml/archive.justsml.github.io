<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">www.DanLevy.net</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-09-24T13:31:35-06:00</updated>
<id>/</id>
<author>
  <name>Dan Levy</name>
  <uri>/</uri>
  <email>Dan@DanLevy.net</email>
</author>


<entry>
  <title type="html"><![CDATA[Beautiful Engineering: Models & Data]]></title>
 <link rel="alternate" type="text/html" href="/programming/2015/09/14/beautiful-engineering-models-and-data.html" />
  <id>/programming/2015/09/14/beautiful-engineering-models-and-data</id>
  <updated>2015-09-26T00:00:00-00:00</updated>
  <published>2015-09-14T00:00:00-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;L.em.Work-in-progress..updated.Sep..2015...em.&quot;&gt;&lt;/a&gt;
&lt;h4&gt;&lt;em&gt;Work-in-progress (updated Sep. 2015)&lt;/em&gt;&lt;/h4&gt;

&lt;a name=&quot;The.issue.at.hand.is.deceptively.simple..amp..subtle:..strong.Naming..strong.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;The issue at hand is deceptively simple &amp;amp; subtle: &lt;strong&gt;Naming&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;I want to avoid the super-fancy-tech-lingo for this article; and hopefully I can illustrate the issue in a more useful fashion.&lt;/p&gt;

&lt;p&gt;While covered in exhausting detail before, the subject matter often gets too technical for the novice programmer to draw any practical understanding. You probably don&amp;rsquo;t need to read this if the following makes sense: &lt;code&gt;No-Sql denormalization strategy&lt;/code&gt;, or &lt;code&gt;Boyce Codd Normal Forms&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Recommended reading includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Book: Code Complete&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phlonx.com/resources/nf3/&quot;&gt;http://phlonx.com/resources/nf3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Database_normalization&quot;&gt;https://en.wikipedia.org/wiki/Database_normalization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;a name=&quot;The.Problem.-.by.Example&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Problem - by Example&lt;/h2&gt;

&lt;p&gt;Have you ever designed a &lt;code&gt;data model&lt;/code&gt; (in code, Sql, or excel worksheets)?
Does the following look familiar?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*** anti-pattern - don&#39;t copy-paste ***
* User
  - id
  - avatarUrl
  - email
  - passwordHash

* Agent
  - id
  - primaryPhoto
  - agentName
  - agentEmail
  - agentPhoneMain
  - agentEmailPrimary
  - agentPhonePrimary
  - agentAddressLine1
  - agentCompanyName
  - agentCompanyAddress
  - *userEmail* - &#39;Pointer&#39; to User table ^^^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this is familiar to you, I&amp;rsquo;ll bet you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Feel any change to your app will necessitate hours of arduous debugging.&lt;/li&gt;
&lt;li&gt;Fear ANY Changing Requirements
&lt;img src=&quot;https://res.cloudinary.com/ddd/image/upload/bldg-collapse__wsZKhIc_kafcha.gif&quot; alt=&quot;schema refactor&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;The.Cost.of.Bad..Naming..Habits&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Cost of Bad (Naming) Habits&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s examine some of the subtle issues (probably familiar):&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Why is naming a field &lt;code&gt;agentEmailPrimary&lt;/code&gt; the worst?
For starters, you are &lt;strong&gt;not&lt;/strong&gt; creating an entirely new object unto the universe. Over-specificity has some traps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;lsquo;Locked&amp;rsquo; into highly specific name, means &lt;code&gt;agentEmailPrimary&lt;/code&gt; probably make your views and related code &lt;strong&gt;0% reusable&lt;/strong&gt;, and featuring annoyingly recurring bugs like:

&lt;ul&gt;
&lt;li&gt;Data not syncing between tables (not obvious if &lt;code&gt;user.email&lt;/code&gt; needs to propagate to &lt;code&gt;agent.agentEmail&lt;/code&gt; or vice-versa - nevermind complexity of manually implementing where &amp;amp; how to enforce this &amp;lsquo;logic&amp;rsquo; &amp;hellip;)&lt;/li&gt;
&lt;li&gt;Validation rules/logic are likely duplicated &amp;amp; inconsitent.&lt;/li&gt;
&lt;li&gt;Increasingly, your project will resemble a shaky Jenga tower.&lt;/li&gt;
&lt;li&gt;Fragility piles up with every single new file, as an extremely high attention to detail is required for even trivial changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I know, you probably feel something like&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/ddd/image/upload/panda-rampage__tumblr_nq7srwTXqr1stn6klo1_500_gm2som.gif&quot; alt=&quot;fuck this&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;A.Solution&quot;&gt;&lt;/a&gt;
&lt;h2&gt;A Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// Dan&#39;s Recommended Schema Consolidation:

User
  - id
  - role: [&#39;agent&#39;, &#39;lead&#39;, &#39;admin&#39;]
  - name
  - phone
  - address
  - email
  - passwordHash
  - company
    - name
    - address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I removed the &lt;code&gt;Agent&lt;/code&gt; table, as it didn&amp;rsquo;t contain fields which were uniquely related to Agents.&lt;/p&gt;

&lt;p&gt;All changes were made with these general ideas in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Eliminate unessesary tables. If you have a few dozen tables, this step is mandatory.&lt;/li&gt;
&lt;li&gt; Try merge related tables. &lt;strong&gt;Important if you are coming from a SQL background to No-SQL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt; Delete redundant data collection (e.g. remove &lt;code&gt;ActivityLogs&lt;/code&gt; table if replaced by Google Analytics)&lt;/li&gt;
&lt;li&gt;Try keep &lt;strong&gt;all field names&lt;/strong&gt; to a &lt;strong&gt;single word/noun/pro-noun&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt; There is &lt;strong&gt;no such thing&lt;/strong&gt; as &lt;code&gt;Agent.agentEmail&lt;/code&gt; or &lt;code&gt;Agent.agentPhonePrimary&lt;/code&gt;. Period.&lt;/li&gt;
&lt;li&gt; By using Highly Specific Names, you cast-in-stone a specific level of &lt;code&gt;code-reusability&lt;/code&gt; and &lt;code&gt;durability&lt;/code&gt;, well, specifically &lt;strong&gt;ZERO %&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt; Don&amp;rsquo;t think you are doing yourself any favors with crap like this &lt;code&gt;User.profileSummaryEmail&lt;/code&gt; (where &amp;lsquo;profile&amp;rsquo; could include contact details for a personal ads site) . This is probably a good point to create a new table, say &lt;code&gt;Profiles&lt;/code&gt; which includes &lt;code&gt;Profiles.email&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;!-- ![schema refactor][schema_refactor] --&gt;




    &lt;p&gt;&lt;a href=&quot;/programming/2015/09/14/beautiful-engineering-models-and-data.html&quot;&gt;Beautiful Engineering: Models &amp; Data&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on September 14, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[AngularJS v2.0 and the Impending Schism]]></title>
 <link rel="alternate" type="text/html" href="/angularjs/2015/08/05/angularjs-v2-impending-schism.html" />
  <id>/angularjs/2015/08/05/angularjs-v2-impending-schism</id>
  <updated>2015-09-01T00:00:00-00:00</updated>
  <published>2015-08-05T00:00:00-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;p&gt;I think we are witnessing the Python 2-&gt;3 &amp;lsquo;Conversion&amp;rsquo; all over again.
AngularJS v2.0 introduces too many changes. &lt;strong&gt;Not least of which is TypeScript&lt;/strong&gt;, which is a big ask amidst the finalization of JS&amp;rsquo;s latest version: ES6.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Let me say clearly: I love TypeScript. I seccretly wish the TC-39 meetings had produced it&amp;hellip; They didn&amp;rsquo;t.
However, They came up with another (totally different), also-awesome spec&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While TypeScript compiles to JavaScript, it doesn&amp;rsquo;t mean you blindly copy &amp;amp; paste &amp;lsquo;compiled&amp;rsquo; TypeScript. It effectively becomes required learning, as to understand annotated AngularJS 2.0 TypeScript.&lt;/p&gt;

&lt;p&gt;Now, newbies must climb &amp;lsquo;Mount TypeScript&amp;rsquo; before they can even start assembling an Angular app (with some level of understanding).&lt;/p&gt;

&lt;div class=&quot;anigif end&quot;&gt;
![not_a_fan][not_a_fan]
&lt;/div&gt;


&lt;p&gt;Oh well, I&amp;rsquo;ll add it to the Newbie training list: somewhere between &lt;code&gt;Basic Shell Usage&lt;/code&gt; and &lt;code&gt;Gulp or Grunt? Godsend+Misery!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
Anyway, I hope this works out...
&lt;/p&gt;




&lt;div class=&quot;anigif top end&quot;&gt;
![drinking][drinking]
&lt;/div&gt;




    &lt;p&gt;&lt;a href=&quot;/angularjs/2015/08/05/angularjs-v2-impending-schism.html&quot;&gt;AngularJS v2.0 and the Impending Schism&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on August 05, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Polyglot Redux]]></title>
 <link rel="alternate" type="text/html" href="/languages/2015/06/12/polyglot-redux.html" />
  <id>/languages/2015/06/12/polyglot-redux</id>
  <updated>2015-06-13 19:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-06-12T03:21:12-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;Programming.Languages.Notes&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Programming Languages Notes&lt;/h1&gt;

&lt;a name=&quot;L.em.Work-in-progress..updated.June.15th.2015...em.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;&lt;em&gt;Work-in-progress (updated June 15th 2015)&lt;/em&gt;&lt;/h3&gt;

&lt;a name=&quot;I.m.sure.my.Miscellaneous.Observations.have.been.made.before..but.here.is.my.list.of.most.interesting.languages:&quot;&gt;&lt;/a&gt;
&lt;h3&gt;I&amp;rsquo;m sure my Miscellaneous Observations have been made before, but here is my list of most interesting languages:&lt;/h3&gt;

&lt;a name=&quot;JavaScript&quot;&gt;&lt;/a&gt;
&lt;h2&gt;JavaScript&lt;/h2&gt;

&lt;p&gt;My One True Love, supremely versatile &amp;amp; ubiquitous - the all-around, amazingly-powerful champ!
It&amp;rsquo;s the #1 Most Active/Popular Language on GitHub.com for &lt;em&gt;years&lt;/em&gt; running.&lt;/p&gt;

&lt;p&gt;I hate to admit it, but for years I foolishly had nothing but scorn and derision for what is now, &lt;strong&gt;my favorite language&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ES6&lt;/strong&gt; has only increased my &lt;del&gt;addiction&lt;/del&gt; love. While pure ES5 will always hold a special place in my heart, each time I use some &lt;strong&gt;ES6&lt;/strong&gt;, I feel that radioactive spider-bite&amp;hellip;&lt;/p&gt;

&lt;p&gt;There were 4 factors which pushed me into the &lt;strong&gt;ES6 Camp&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s fun. Seriously. There are tangible gains in beauty, clarity &amp;amp; productivity.&lt;/li&gt;
&lt;li&gt;Subjective claims, you say? Let me show you a bit of ES6:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let expired = users.filter(u =&amp;gt; Date.now() &amp;gt; u.trialDate)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now you don&amp;rsquo;t have to pretend you know how to use &lt;code&gt;Object.create&lt;/code&gt; or &lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See examples below&lt;/li&gt;
&lt;li&gt;As of July 2015,  ES6 is an officially finalized standard now!&lt;/li&gt;
&lt;li&gt;Support is Effectively 100%*! &amp;hellip; Ok, BabelJS is needed to patch your code so it&amp;rsquo;s ES5 compatible. Historically JS transpilers have been frowned upon. However, as of late (2014-15) things have changed as BabelJS has become a key enabler/driver of language advancement. Tons of companies including Microsoft &amp;amp; Facebook use it on some of the largest sites around.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v4.0.0/&quot;&gt;Latest versions of Node&lt;/a&gt; include the same V8 JS engine as Chrome v45, it&amp;rsquo;s v4.5&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Examples&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;// /services/users.js
class Users {
  constructor(data) {
    this.users = data || [];
  }
  expired() {
    return this.users
      .filter(u =&amp;gt; Date.now() &amp;gt; u.trialDate)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;No more tedious code to &amp;lsquo;extract&amp;rsquo; and &amp;lsquo;check&amp;rsquo; fields passed to a function. Cut to example &lt;code&gt;add()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;// /services/users.js
class Users {
  constructor(data) { this.users = data || []; }
  add({name, email, password}) {
    // Store pwd hash, We only need to define 1 explicit `var/let` - the other vars are &#39;defined&#39; with the `{fields}` wizardry above ^^^
    let hash = getSha256(password);
    return http.post(&#39;/users&#39;, {
      &#39;name&#39;: name,
      &#39;email&#39;: email,
      &#39;passwordHash&#39;: hash
    })
    .then(usr =&amp;gt; this.users.push(usr)); // append user upon service response
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know. It feels like this:&lt;/p&gt;

&lt;p&gt;It gets better: auto &lt;code&gt;this&lt;/code&gt; binding more-sane inheritance&lt;/p&gt;

&lt;a name=&quot;io.js&quot;&gt;&lt;/a&gt;
&lt;h4&gt;&lt;a href=&quot;http://iojs.org/&quot;&gt;io.js&lt;/a&gt;&lt;/h4&gt;

&lt;a name=&quot;Node.JS&quot;&gt;&lt;/a&gt;
&lt;h4&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.JS&lt;/a&gt;&lt;/h4&gt;

&lt;a name=&quot;Rust&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Rust&lt;/h2&gt;

&lt;a name=&quot;Official.Site&quot;&gt;&lt;/a&gt;
&lt;h4&gt;&lt;a href=&quot;http://www.rust-lang.org/&quot;&gt;Official Site&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imagine if there was a language as fast as C and as powerful as Python/C++, yet without the complexity/pitfalls that usually trap even the most skilled devs.&lt;/li&gt;
&lt;li&gt;In fact I&amp;rsquo;d guess Rust is roughly as complex as the ES6 spec.&lt;/li&gt;
&lt;li&gt;It includes a ton of extras:

&lt;ol&gt;
&lt;li&gt;Essentially Rust transpiles from semi-dynamic syntax into &lt;strong&gt;pure C code&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;Including &lt;strong&gt;&lt;strong&gt;all the best practices&lt;/strong&gt;&lt;/strong&gt; in C you would probably screw up on, I &lt;del&gt;eventually&lt;/del&gt; always do.&lt;/li&gt;
&lt;li&gt;Automatically you get:&lt;/li&gt;
&lt;li&gt;Auto Memory management (no need for a slow garbage collector!)&lt;/li&gt;
&lt;li&gt;Perfectly scoped Object ownership/locking (mutexting &amp;amp; context switching minimized)&lt;/li&gt;
&lt;li&gt;Object lifetimes (automatically implemented*, and auto coded like you knew every edge case)&lt;/li&gt;
&lt;li&gt;Prevent virtually all run time errors (seriously, your code-paths become explicit: you just can&amp;rsquo;t overlook a code-path)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Oh yeah, it throws in true language extensibility with a sensible &amp;lsquo;macro&amp;rsquo; feature.

&lt;ul&gt;
&lt;li&gt;Need Comprehensions? &lt;a href=&quot;https://gist.github.com/hanny24/5749688&quot;&gt;Scala style? Done&lt;/a&gt;, and &lt;a href=&quot;https://gist.github.com/JeffBelgum/5e762761cd63c796e803&quot;&gt;Like Python? Done&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Too good to be true? Nah, It gets better:&lt;/li&gt;
&lt;li&gt;Bleeding edge indicators (github.com stats) reveal Rust is highly competitive or even beating Go (Google&amp;rsquo;s hot-newish language)

&lt;ul&gt;
&lt;li&gt;About 4K More Stars than Go (currently around 12,200)&lt;/li&gt;
&lt;li&gt;More total Contributors ( 2x! - 1,071 vs. Go&amp;rsquo;s 479 )&lt;/li&gt;
&lt;li&gt;More forks ( 3X! - 2,343 vs. 765 )&lt;/li&gt;
&lt;li&gt;Number of Open Issues, Loses by a hair ( 2,000 vs 1,730 from Go )&lt;/li&gt;
&lt;li&gt;Pull Requests (Rust 70+ vs. Go&amp;rsquo;s 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I had to triple check the numbers too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other libraries are very stable due to the constructs &amp;amp; rules of rust.&lt;/li&gt;
&lt;li&gt;Threading model usable by mere mortals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decent &lt;strong&gt;web frameworks&lt;/strong&gt; are relatively new, untested, and usually undocumented (though they are &lt;strong&gt;getting&lt;/strong&gt; very impressive - as of March 2015).&lt;/li&gt;
&lt;li&gt;Lots of early pre-1.0 breaking changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Python&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Python&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Overwhelmingly complete assortment of algorithms are already implemented in Python ( see: scilearnkit, numpy, matplotlib, pil/pillow, etc. )&lt;/li&gt;
&lt;li&gt;Very Fun to write! Comprehensions and Decomposition are great features and make other languages seem just bloated!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# dummy code: defines a color + pixel-coord -
def pixel(x, y, r, g, b): return dict(x=x, y=y, r=r, g=g, b=b)
# Create a new pixel object and apply to set of vars
x, y, r, g, b = pixel(10, 20, 255, 255, 255)
# Now we can call pixel
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tuples and arbitrary sets are so easy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Annoyingly, Python 2.x and 3.x are incompatible. The Great Schism continues, so many years later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Haskell&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Haskell&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Very rewarding when you finally memorize enough syntax to whip up comprehensions-based expressive patterns&lt;/li&gt;
&lt;li&gt;You will learn mind-bending code patterns - often somewhat applicable to other languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Syntax &amp;amp; Patterns can be hard to get used to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div align=&quot;center&quot; class=&quot;anigif&quot;&gt;
![endless_loop][endless_loop]
&lt;/div&gt;


&lt;a name=&quot;SmallTalk-80&quot;&gt;&lt;/a&gt;
&lt;h2&gt;SmallTalk-80&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Incredibly simple compilers (original especially)&lt;/li&gt;
&lt;li&gt;Great resources: &lt;a href=&quot;http://peter.michaux.ca/articles/smalltalk-mvc-translated-to-javascript&quot;&gt;Smalltalk MVC Translated to JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You will likely never use this language for anything. Zero projects. However it will have more of an impact on your coding style, faster than other functional languages&amp;hellip; This should be in the pros list)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;/languages/2015/06/12/polyglot-redux.html&quot;&gt;Polyglot Redux&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 12, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker rocks. Boot2docker just sucks.]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/06/10/docker-great-though-boot2docker-sucks.html" />
  <id>/docker/2015/06/10/docker-great-though-boot2docker-sucks</id>
  <updated>2015-06-15 04:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-06-10T23:00:12-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;Overview&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Overview&lt;/h1&gt;

&lt;a name=&quot;To.everyone.on.OSX.or.Windows:.Don.t.let.Boot2docker.leave.you.with.the.impression.that.Docker.sucks..It.s.really.just.your.antique.OS.&quot;&gt;&lt;/a&gt;
&lt;h4&gt;To everyone on OSX or Windows: Don&amp;rsquo;t let Boot2docker leave you with the impression that Docker sucks! It&amp;rsquo;s really just your antique OS.&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Docker is amazing, period.&lt;/li&gt;
&lt;li&gt;However it&amp;rsquo;s rough-around-the-edges, hackey utility, boot2docker - for OS X, Windows and old Linux Kernels - leaves a &lt;strong&gt;lot&lt;/strong&gt; to be desired.&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Issues&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Issues&lt;/h1&gt;

&lt;blockquote&gt;&lt;p&gt;Boot2docker causes 99/100 headaches compared with using a native docker install locally.
I should concede that it wraps several other complicated/flakey technologies:
VirtualBox, x-platform Folder Sharing, and also the docker cli command runs in a network-client mode so,&lt;/p&gt;

&lt;a name=&quot;file.copying..builds.etc.take.a.long.time..vs..running.a.native.docker.server.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;file copying, builds etc take a long time  vs. running a native docker server.&lt;/h1&gt;

&lt;p&gt;Docker can currently only run natively on a Linux Kernel 3.4+ - and the current boot2docker vm actually runs v4.
Bottom Line: Install the Latest Debian (w/ xfce or MATE) on your Mac/Windows box,
&amp;hellip; c&#39;mon those games aren&amp;rsquo;t helping your code&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Boot2docker.Key.Commands&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Boot2docker Key Commands&lt;/h1&gt;

&lt;a name=&quot;When.you.get.error:..FATA.0000..&quot;&gt;&lt;/a&gt;
&lt;h2&gt;When you get error: &amp;lsquo;FATA[0000]&amp;rsquo;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Full error message:

&lt;ul&gt;
&lt;li&gt;FATA[0000] Get &lt;a href=&quot;http:///var/run/docker.sock/v1.18/info:&quot;&gt;http:///var/run/docker.sock/v1.18/info:&lt;/a&gt; dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution: You need some info from boot2docker

&lt;ul&gt;
&lt;li&gt;Run this to get the 3 needed shell environment variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;boot2docker shellinit
# Copy &amp;amp; paste the exports into the current shell, &amp;amp; retry $(docker info)
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Get.Docker.Server.IP.Address&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Get Docker Server IP Address&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;boot2docker ip
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;Now your app on port 3000 is available at something like: &lt;a href=&quot;http://$&quot;&gt;http://$&lt;/a&gt;(boot2docker ip):3000/&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Boot2Docker.Quick.Start.for.OS.X&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Boot2Docker Quick Start for OS X&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;In a terminal on your &lt;code&gt;brew&lt;/code&gt; able Mac:&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;brew install boot2docker
boot2docker init
boot2docker up
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/docker/2015/06/10/docker-great-though-boot2docker-sucks.html&quot;&gt;Docker rocks. Boot2docker just sucks.&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 10, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker Firewall Setup]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/06/06/docker-firewall-setup.html" />
  <id>/docker/2015/06/06/docker-firewall-setup</id>
  <updated>2015-06-15 04:50:00 -0600T00:00:00-00:00</updated>
  <published>2015-06-06T16:22:22-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;Setup.Docker.Host.Firewall&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Setup Docker Host Firewall&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Debian/Ubuntu Server is assumed&lt;/li&gt;
&lt;li&gt;Designed to run on Docker Host Server&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Install.Requirements&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Install Requirements&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;# Ultimate Firewall Needed
apt-get update &amp;amp;&amp;amp; apt-get install -y ufw nmap curl
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Get.your.Internal..amp..External.IP.Addresses&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Get your Internal &amp;amp; External IP Addresses&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;# Get your IP Addresses, simple output:
hostname --all-ip-addresses

# OR use ip tool, example:
ip addr
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Firtewall..UFW..Setup.-.Example.Cmds&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Firtewall (UFW) Setup - Example Cmds&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;# Allow and log all new ssh connections,
ufw allow log proto tcp from any to any port 22
## Allow http traffic (w/o explicit logging)
ufw allow proto tcp from any to any port 80
ufw limit tcp/22 # Basic Rate limit 4 SSH brute force mitigation

# Set your ext IP
export EXTERNAL_IP=123.123.123.123
# Update docker IP if needed
export DOCKER_IP=172.17.42.1
# Forward tcp 8080 traffic to  Dockerized App
ufw allow proto tcp from $EXTERNAL_IP port 8080 to $DOCKER_IP port 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Enable...Start.Firewall&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Enable / Start Firewall&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Be Careful, Don&amp;rsquo;t Lock out your SSH port (sshd defaults to 22)&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ufw enable
ufw reset
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;a name=&quot;Test.Your.Firewall&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Test Your Firewall&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Important: USE A REMOTE IP ADDR/LOCATION&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;# Verify dependency
apt-get update &amp;amp;&amp;amp; apt-get install -y nmap

# Set scan target
export TARGET_HOST=123.123.123.123

# Example Scan Commands:
# Fast open port check
nmap -p 1-10240,27017 -T5 $TARGET_HOST
# Thorough scan
nmap -p 1-10240,27017 --open -v -APN $TARGET_HOST
# Svc Inspection
nmap -p 1-10240,27017 -O --osscan-guess $TARGET_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;DONE..Now.you.should.see.ONLY.the.ports.you.configured.&quot;&gt;&lt;/a&gt;
&lt;h4&gt;DONE! Now you should see ONLY the ports you configured!&lt;/h4&gt;

    &lt;p&gt;&lt;a href=&quot;/docker/2015/06/06/docker-firewall-setup.html&quot;&gt;Docker Firewall Setup&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 06, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[JavaScript Magic]]></title>
 <link rel="alternate" type="text/html" href="/javascript/2015/06/06/javascript-scope-magic.html" />
  <id>/javascript/2015/06/06/javascript-scope-magic</id>
  <updated>2015-06-15 03:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-06-06T09:42:21-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;L..Work-in-progress..Includes.Future.JavaScript.Article.Ideas..&quot;&gt;&lt;/a&gt;
&lt;h3&gt;[ Work-in-progress, Includes Future JavaScript Article Ideas ]&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;This post is geared to modern browsers and Node.JS/iojs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Imperative.vs..Recursive.vs..Functional&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Imperative vs. Recursive vs. Functional&lt;/h1&gt;

&lt;p&gt;Work-in-progress&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;
// Imperative: The Fastest ( + very simple, no new pointers or excess allocs ):
function fib(n) {
  var a = 1, b = 1, c = 0;
  for(var i = 1; i &amp;lt; n-1; ++i) {
    c = a + b;
    a = b;
    b = c;
  }
  return b;
}

// Recursive: (FIREFOX or BABELJS Only) ES6 function definition with
//  parameter defaults used to set initial (internal/recursive) values
function fib(n, current=0, a=1, b=1, c=0) {
  current++;
  c = a + b;
  a = b;
  b = c;
  return current &amp;gt;= n ? b : fib(n, current, a, b, c);
}

// Text-book-Bad Example - poor function scope w/ multiple mutable external values
function fib(n) {
  if (!arr) { var arr = [1,1]; n=n-2; };// Bad
  if (n===-1) {return [arr[0]];}
  if (n===0) {return arr;}
  var proc = function() {
    --n;
    arr.push(arr[arr.length-1] + arr[arr.length-2]);
    return (n===0 ? arr : proc());
    // Bad: inner recursive function not needed, hint: variables used are from parent function scope
  };
  var ans = proc();
  return ans[ans.length-1];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Promises:.Awesome.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Promises: Awesome!&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;
// Example Using bluebird Promises and it&#39;s
var Promise = require(&#39;bluebird&#39;),
    fs = Promise.promisifyAll(require(&#39;fs&#39;)),
    less = Promise.promisifyAll(require(&#39;less&#39;));

function writeFileData(data) {
  return fs.writeFileAsync(&#39;/tmp/output.css&#39;, data);
}
// Bluebird makes something like this perhaps uncomfortably simple and succinct:
fs.readFileAsync(&#39;./style.less&#39;) // Call promisified readFile()
  .then(less.renderAsync)         // Hand off to less.render
  .then(writeFileData);      // Function to recieve the css contents (1st parameter)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;While, native ES6 Promises are great, I prefer the robust &lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md&quot;&gt;Bluebird Promise Library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Library or not, modern browsers have supported Promise for years.&lt;/li&gt;
&lt;li&gt;Promises can be utilized without crazy patterns - implicit &lt;code&gt;deferred&lt;/code&gt; is preferable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$q just sucks&lt;/strong&gt; just use bluebird, see above.&lt;/li&gt;
&lt;li&gt;Worth mentioning: Bluebirds Benchmarks are best-case tests, so take note if doing crazy fancy promise chains&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Java.vs.JavaScript&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Java vs JavaScript&lt;/h1&gt;

&lt;a name=&quot;Rate.Limiting...Debouncing...Throttling&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Rate Limiting / Debouncing / Throttling&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In JavaScript &lt;a href=&quot;http://davidwalsh.name/essential-javascript-functions&quot;&gt;David Walsh implemented debounce&lt;/a&gt; in less than 20 lines!&lt;/li&gt;
&lt;li&gt;In Java, JDebounce, an library which is a lot more complicated, at ~500+ lines.&lt;/li&gt;
&lt;li&gt;_ Comparing the two: _&lt;/li&gt;
&lt;li&gt; The JavaScript is fast &amp;amp; uses first-class functions to achieve brilliant simplicity.&lt;/li&gt;
&lt;li&gt; Whereas the Java has many more moving parts, annotations are used to apply behaviour at compile-time, and there&amp;rsquo;s a ton of XML, just for funsies!&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Inversion.of.Control.Techniques&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Inversion of Control Techniques&lt;/h1&gt;

&lt;p&gt;Work-in-progress&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/javascript/2015/06/06/javascript-scope-magic.html&quot;&gt;JavaScript Magic&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 06, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker server Setup]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/04/05/docker-server-setup-notes.html" />
  <id>/docker/2015/04/05/docker-server-setup-notes</id>
  <published>2015-04-05T19:00:59-06:00</published>
  <updated>2015-04-05T19:00:59-06:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;Docker..strong.Host.Server..strong..Setup&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Docker &lt;strong&gt;Host Server&lt;/strong&gt; Setup&lt;/h1&gt;

&lt;a name=&quot;Basic.Monitoring.Tools&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Basic Monitoring Tools&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;# Debian/BSD Requirements / Updates + monitoring tools: atop &amp;amp; htop
apt-get update &amp;amp;&amp;amp; apt-get install -y vim-nox git-core curl atop htop build-essential libssl-dev linux-image-amd64 linux-headers-amd64

# OSX, Debian &amp;amp; RHEL: Host OS Tuning
sysctl -w vm.max_map_count=262144

# Updates Profile init scripts before appending new scripts below
mkdir ~/backups
cp ~/.bash* ~/backups/

# Debian/BSD:  Append Shell Environment Shortcuts + XTERM Colors
curl -sSL https://gist.githubusercontent.com/justsml/882f6c7cee46aa71625f/raw/a4f0d1ed006080d5fe7f40b6e07b8eb9d6838a5f/.bashrc &amp;gt;&amp;gt; ~/.bashrc
curl -sSL https://gist.githubusercontent.com/justsml/b667f158731fd054cd38/raw/5778dbb5d3d138ccf99ae1bf973457ce89661362/.bash_aliases &amp;gt;&amp;gt; ~/.bash_aliases
# Read into current shell (login steps already missed the aliases file)
source ~/.bashrc

# Install Docker, straight from the horses mouth
curl -sSL https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;Only for SELinux Enabled Systems&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;# SELinux fixes (optional)
# chcon -Rt svirt_sandbox_file_t /mongodb
# chcon -Rt svirt_sandbox_file_t /elastic
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Simple.Database.Setup.Startup&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Simple Database Setup/Startup&lt;/h1&gt;

&lt;a name=&quot;MongoDB.v3.Server&quot;&gt;&lt;/a&gt;
&lt;h2&gt;MongoDB v3 Server&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;mkdir /mongodb
docker run --name mongo -p 27017:27017 -v /mongodb:/data -d mongo:latest bash -c &#39;mongod --logpath /data/mongodb.log --logappend --dbpath /data/data --storageEngine=wiredTiger&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Elastic.Search&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Elastic Search&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;mkdir /elastic
docker run --name elastic -d -p 9200:9200 -p 9300:9300 -v /elastic:/data elasticsearch bash -c &#39;elasticsearch --cluster.name elastic_cluster --node.name elastic01 --path.data /data/elastic-data --path.logs /data/elastic-logs &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;You just lit up 2 database docker instances!!!
If it were any easier, I&amp;rsquo;m pretty sure you couldn&amp;rsquo;t invoice for it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Package.up.your.NodeJS.Ruby.Python.Web.App&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Package up your NodeJS/Ruby/Python/Web App&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Add a blank file named &lt;code&gt;Dockerfile&lt;/code&gt; in your project root.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Optional, Recommended)&lt;/em&gt; Add a &lt;code&gt;.dockerignore&lt;/code&gt; using .gitignore rules to exclude large non-essential paths. By default all project files are included.&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Create.a..code.Dockerfile..code.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Create a &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;dockerfile&quot;&gt;# Example for NodeJS
FROM node:0.12
EXPOSE [3000]
COPY . /app/
WORKDIR /app
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get dist-upgrade -y
RUN [&quot;npm&quot;, &quot;install&quot;]
# Overridable Command
CMD [&quot;npm&quot;, &quot;start&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s easier to show how to start using the Dockerfile and demonstrate the results via console (see commands below).&lt;/p&gt;

&lt;p&gt;In terminal, &lt;code&gt;cd&lt;/code&gt; to your project folder and run the following &lt;code&gt;build&lt;/code&gt; command &lt;em&gt;everytime&lt;/em&gt; you deploy changes - or want to change/upgrade OS or Env config)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;docker build -t app-name-here .
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Docker.Commands.to.Learn&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Docker Commands to Learn&lt;/h1&gt;

&lt;a name=&quot;Build.Docker.Image.Every.Deploy.Change&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Build Docker Image Every Deploy/Change&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;docker build -t app-name-here .
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Create.Run.Web.App.w..Links.to.DB.Servers&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Create/Run Web App w/ Links to DB Servers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;docker run -d --name webapp01 -p 3000:3000 --link mongo:mongo --link elastic:elastic app-name-here
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Run.Interactively..non-daemon..in.terminal.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Run Interactively (non-daemon, in terminal)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;docker run -it --name webapp01 -p 3000:3000 --link mongo:mongo --link elastic:elastic app-name-here bash
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Delete.Container.Instance.or.Image&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Delete Container Instance or Image&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Important: Any data not stored on the mounted volume path will be lost!!&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;# Delete Image
docker rmi -f app-name-here
docker rm -f webapp01
# now re-run your `docker run...` from ^^^
# So for example, let&#39;s kill your db instances above, run: ( start with something like `docker stop {mongo,elastic}` )
docker rm -f mongo elastic
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/docker/2015/04/05/docker-server-setup-notes.html&quot;&gt;Docker server Setup&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on April 05, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Winning Design Resource]]></title>
 <link rel="alternate" type="text/html" href="/design/2015/02/26/amazing-resources.html" />
  <id>/design/2015/02/26/amazing-resources</id>
  <updated>2015-06-12 19:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-02-26T04:42:21-07:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;Solve.2.UI.challenges&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Solve 2 UI challenges&lt;/h1&gt;

&lt;blockquote&gt;&lt;p&gt;Your Prototype Apps Suck: So sprinkle some awesome in there&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Beautiful.Sliding.Menus&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Beautiful Sliding Menus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tympanus.net/Development/OffCanvasMenuEffects/cornerbox_nested.html&quot;&gt;Side-Menu Demo&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note: Not my code, however I&amp;rsquo;ve evaluated it and I have to say I &lt;strong&gt;rarely find code at this level&lt;/strong&gt;. Like, &lt;em&gt;never&lt;/em&gt;, folks.
The &lt;a href=&quot;http://tympanus.net/codrops/author/crnacura/&quot;&gt;author, Mary Lou&lt;/a&gt; is just incredibly talented.&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Impressive.Tooltips&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Impressive Tooltips&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tympanus.net/codrops/2014/10/07/tooltip-styles-inspiration/&quot;&gt;View demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow! &amp;hellip; Am I Right?&lt;/p&gt;

&lt;a name=&quot;Misc&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Misc&lt;/h3&gt;

&lt;p&gt;I know I said it, but let me emphasize: All the &lt;strong&gt;code is extraordinarily well done&lt;/strong&gt;&amp;hellip;  &lt;em&gt;I never say that, most devs rarely bother to be this meticulous&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Btw, I say &amp;lsquo;prototype apps&amp;rsquo; merely because the examples need a few accessability/usability tweaks (which are described in Mary&amp;rsquo;s articles).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here&amp;rsquo;s where I found this stuff: &lt;a href=&quot;https://twitter.com/codrops&quot;&gt;follow codrops at https://twitter.com/codrops&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/design/2015/02/26/amazing-resources.html&quot;&gt;Winning Design Resource&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[AngularJS Tricks]]></title>
 <link rel="alternate" type="text/html" href="/angularjs/2015/02/26/stop-the-angularjs-hate.html" />
  <id>/angularjs/2015/02/26/stop-the-angularjs-hate</id>
  <published>2015-02-26T04:22:33-07:00</published>
  <updated>2015-02-26T04:22:33-07:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;AngularJS.CAN.BE.Fast.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;AngularJS CAN BE Fast!&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;AngularJS Developers quickly discover that their med-large apps are buckling under the weight of scattered &lt;code&gt;$watch&#39;s&lt;/code&gt; and the often bloated crutch known as &lt;code&gt;$scope&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Keep your &lt;code&gt;$scope&lt;/code&gt; free of excess UI state, try limit the size &amp;amp; depth of your overall hierarchy.&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;L2-way.data.binding:.2-way.Sword&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2-way data binding: 2-way Sword&lt;/h2&gt;

&lt;p&gt;2-way binding alone makes coming from other frameworks like Backbone, well, &lt;strong&gt;frickin amazeballs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The problem is: many sites &lt;strong&gt;chronically overuse&lt;/strong&gt; Angular&amp;rsquo;s design patterns.
This leads to directive sprawl and a &lt;code&gt;$scope/rootScope&lt;/code&gt; which easily has 1000&amp;rsquo;s of instances, and can cling to huge objects preventing any hope of effective garbage collection.&lt;/p&gt;

&lt;p&gt;You know where this is going: an exhausted browser! Forever doomed to work at a &lt;strong&gt;frantic pace&lt;/strong&gt; executing endless and redundant UI/DOM re-compiles.&lt;/p&gt;

&lt;a name=&quot;Stop.OVER-Angular.JSification&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Stop OVER-Angular.JSification&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;“If your only tool is a hammer, then every problem looks like a nail.”
- old adage&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does your app have a problem with directives?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;jade&quot;&gt;current-user-status-label
  div(ng-if=&#39;loggedIn&#39;)
    view-user-surplusage(ng-if=&#39;!editMode&#39;)
      .head: contact-details(user=&#39;user&#39;)
      .tool: contact-buttons(loggedIn=&#39;loggedIn&#39;)
      a.edit-icon(ng-click=&#39;editMode = true&#39;)
    edit-user-surplusage(ng-if=&#39;editMode&#39;)
      .head: avatar-edit(user=&#39;user&#39;)
      .body: edit-contact-details(user=&#39;user&#39;)
      a.save-icon(ng-click=&#39;editMode = false&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s design a flexible user-widget which helps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Versatile componentization w/ DRY Angular code&lt;/li&gt;
&lt;li&gt;Understandable directives, with minimal directive size/depth (mind your ng-repeats)&lt;/li&gt;
&lt;li&gt;Simple Service Layer&lt;/li&gt;
&lt;li&gt;Little actual coding to implement - just HTML/View Code&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code class=&quot;jade&quot;&gt;// jade
user-widget
  div(ng-if=&#39;loggedIn&#39;)
    div.edit(ng-if=&#39;editMode&#39;)
      h4.email-icon: input(type=&#39;email&#39;, ng-model=&#39;user.email&#39;)
      h4.phone-icon: input(type=&#39;email&#39;, ng-model=&#39;user.phone&#39;)
      a.save-icon(ng-click=&#39;editMode = false&#39;)
    div.show(ng-if=&#39;!editMode&#39;)
      h1.users-icon 
      h4.email-icon 
      h4.phone-icon 
      a.edit-icon(ng-click=&#39;editMode = true&#39;)
  div(ng-if=&#39;!loggedIn&#39;)
    h5: i Welcome User
    a.btn(href=&#39;/login&#39;) Login
&lt;/code&gt;&lt;/pre&gt;

&lt;a name=&quot;Solutions&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Solutions&lt;/h1&gt;

&lt;a name=&quot;Angular.Tips&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Angular Tips&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Use 1-way binding ( e.g. &lt;code&gt;{ :: title }&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;Limit recursive nesting of directives&lt;/li&gt;
&lt;li&gt;And if you must nest directives, &lt;em&gt;NEVER&lt;/em&gt; do so inside an &lt;code&gt;ng-repeat&lt;/code&gt; - Performance will start to inversely mirror something like &lt;code&gt;O(n^2)^3&lt;/code&gt; ;)&lt;/li&gt;
&lt;li&gt;Use native JS/DOM code in a factory pattern to create basic DOM/UI fragments, examples: Modal msg box, status bar. Call UI factories from either directives or controllers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bonus:&lt;/em&gt; Understand cost and triggers of &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rendering/index?hl=en&quot;&gt;browser render lifecycle&lt;/a&gt;: animation, composite rendering, reflows&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Use.Browserify.to.Organize.Project&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Use Browserify to Organize Project&lt;/h2&gt;

&lt;p&gt;Not specifically for Angular per-se, but essential for simple dependency resolution.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/substack/browserify-handbook/blob/master/readme.markdown#exports&quot;&gt;Browserify&lt;/a&gt; makes JS projects managable with virtually no added code overhead (ok, a few 100 chars).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/substack/browserify-handbook/blob/master/readme.markdown#exports&quot;&gt;Just read this section&lt;/a&gt; of the &lt;a href=&quot;https://github.com/substack/browserify-handbook/&quot;&gt;Browserify Handbook&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Alternatives&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Alternatives&lt;/h1&gt;

&lt;a name=&quot;ReactJS.from.Facebook&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; from Facebook&lt;/h2&gt;

&lt;p&gt;For views which need minimal description:
If you have tons of small reusable UI components - ReactJS might be a better choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your project&amp;hellip;?:

&lt;ul&gt;
&lt;li&gt;Has a different philosophy to UI/DOM implementation than Angular&lt;/li&gt;
&lt;li&gt;Already has some kind of &amp;lsquo;framework&amp;rsquo; - You can &lt;strong&gt;use ReactJS alongside&lt;/strong&gt; AngularJS, Ember, Backbone.&lt;/li&gt;
&lt;li&gt;Handles frequent data model changes in it&amp;rsquo;s own code, you&amp;rsquo;ll benefit by avoiding the ADHD digest/loop pattern of Angular&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Polymer.Project.from.Google&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;a href=&quot;http://www.Polymer-Project.org/&quot;&gt;Polymer Project&lt;/a&gt; from Google&lt;/h2&gt;

&lt;a name=&quot;Pure-er.JS.Approach&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Pure-er JS Approach&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;By the way, here&amp;rsquo;s where I try create framework agnostic code (+1 testability, +1 reuse)

&lt;ol&gt;
&lt;li&gt; Use plain javascript class to load data (AJAX/JSONP/Embedded in page, et al.)&lt;/li&gt;
&lt;li&gt; Use mustache templating to create HTML strings (or DOM directly)&lt;/li&gt;
&lt;li&gt; Cache rendered content in localStorage if you can&lt;/li&gt;
&lt;li&gt; (Optional) Now add an event listener to re-render the content. I have standardized on the event name &lt;code&gt;refresh.&amp;lt;class-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;/angularjs/2015/02/26/stop-the-angularjs-hate.html&quot;&gt;AngularJS Tricks&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker === Love]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/02/26/docker-makes-everything-better.html" />
  <id>/docker/2015/02/26/docker-makes-everything-better</id>
  <published>2015-02-26T04:07:59-07:00</published>
  <updated>2015-02-26T04:07:59-07:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;Docker.Can.Do.Everything..&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Docker Can Do Everything!*&lt;/h1&gt;

&lt;p&gt;Improve your process for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Testing Dev Tools &amp;amp; Servers WITH VIRTUALLY ZERO risk of messing up dependencies on your PC&lt;/li&gt;
&lt;li&gt;Testing your software&lt;/li&gt;
&lt;li&gt;Makes you write more idempotent, modular code&amp;hellip; (I&amp;rsquo;ll write how to actually realize this in a follow up)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;There may seem like a huge volume of new stuff to learn, &lt;strong&gt;don&amp;rsquo;t let that stop you&lt;/strong&gt; from getting started.&lt;/p&gt;

&lt;a name=&quot;Notes&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Notes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you see a &lt;code&gt;docker run&lt;/code&gt; command with either options &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;-it&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-it&lt;/code&gt; or &lt;code&gt;-i -t&lt;/code&gt; will run the configured command interactively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; will start the docker container as a &amp;lsquo;daemon&amp;rsquo; aka background service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;a name=&quot;EXAMPLES&quot;&gt;&lt;/a&gt;
&lt;h1&gt;EXAMPLES&lt;/h1&gt;

&lt;a name=&quot;nginx&quot;&gt;&lt;/a&gt;
&lt;h2&gt;nginx&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
    # Note: using host-based, shared folders
    #(shared folders are not possible with the VOLUME Dockerfile cmd)
    sudo docker run --name web01 -d -p 8181:80 \
        -v $(NGINX_DIR)/etc:/etc/nginx \
        -v $(NGINX_DIR)/log:/var/log/nginx \
        -v $(NGINX_DIR)/www:/var/www/html \
        nginx:latest

    # Local data, isolated within instance
    sudo docker run --name web01 -d -p 8181:80 nginx:latest

    # nodejs
    sudo docker run --name nodejs01 -d -p 3300:3300 -p 4433:4433 nodejs:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;Credits: &lt;a href=&quot;https://dockerfile.github.io/#/nginx&quot;&gt;https://dockerfile.github.io/#/nginx&lt;/a&gt;
Docker will make your life easier throughout the &lt;em&gt;entire&lt;/em&gt; SDLC.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pretty close&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

    &lt;p&gt;&lt;a href=&quot;/docker/2015/02/26/docker-makes-everything-better.html&quot;&gt;Docker === Love&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Security Notes: RegEx]]></title>
 <link rel="alternate" type="text/html" href="/security/2015/02/23/security-notes-regex.html" />
  <id>/security/2015/02/23/security-notes-regex</id>
  <published>2015-02-23T22:42:21-07:00</published>
  <updated>2015-02-23T22:42:21-07:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;a name=&quot;Denial-of-Service.Regex.Vulnerability&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Denial-of-Service Regex Vulnerability&lt;/h1&gt;

&lt;p&gt;One of the most common, and yet hard-to-spot vulnerabilities I encounter relate to regular expressions.
Either poorly written or poorly implemented.&lt;/p&gt;

&lt;a name=&quot;Warning.Signs&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Warning Signs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You have multiple capture groups&lt;/li&gt;
&lt;li&gt;Global matching&lt;/li&gt;
&lt;li&gt;Expression is used with un-checked user input&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Mitigation...Resolution&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Mitigation / Resolution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;RegEx is hard

&lt;ol&gt;
&lt;li&gt; For example, here is how the really smart folks at &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository&quot;&gt;OWASP recommend handling IP validation&lt;/a&gt;: &lt;code&gt;^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; That&amp;rsquo;s longer than a tweet, for a 4-byte IP Address!!!&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Make sure user input isn&amp;rsquo;t unduly long, when I know input data is reliably less than 40 chars, I&amp;rsquo;ll make sure I prevent anything over 64 - otherwise, an attacker could overwhelm my system with a flood of 4Kb requests.&lt;/li&gt;
&lt;li&gt;This affects almost every language and platform .NET/Node/Python/PERL/Java&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Reference&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.liftsecurity.io/2014/11/03/regular-expression-dos-and-node.js?utm_source=nodeweekly&amp;amp;utm_medium=email&quot;&gt;Regular Expression DoS and Node.js&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/security/2015/02/23/security-notes-regex.html&quot;&gt;Security Notes: RegEx&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 23, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
