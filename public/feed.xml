<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">www.DanLevy.net</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-06-19T21:49:48-06:00</updated>
<id>/</id>
<author>
  <name>Dan Levy</name>
  <uri>/</uri>
  <email>Dan@DanLevy.net</email>
</author>


<entry>
  <title type="html"><![CDATA[Docker Cluster Walkthrough]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/06/16/docker-example-mongodb-elastic-redis-nodejs-with-nginx-proxy.html" />
  <id>/docker/2015/06/16/docker-example-mongodb-elastic-redis-nodejs-with-nginx-proxy</id>
  <updated>2015-06-17T00:00:00-00:00</updated>
  <published>2015-06-16T00:00:00-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;h1 id=&quot;setup-database-servers&quot;&gt;Setup Database Servers&lt;/h1&gt;

&lt;h2 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h2&gt;
&lt;p&gt;```&lt;br /&gt;
docker run –hostname mongo2 -d –name mongo2 -p 47017:27017 -v /mongodb2:/data mongo:latest bash -c ‘mongod –logpath /data/logs/mongodb.log –logappend –dbpath /data/collections –storageEngine=wiredTiger –replSet “rs0”’&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/docker/2015/06/16/docker-example-mongodb-elastic-redis-nodejs-with-nginx-proxy.html&quot;&gt;Docker Cluster Walkthrough&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 16, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker Cluster Walkthrough]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/06/16/docker-deployment-thoughts.html" />
  <id>/docker/2015/06/16/docker-deployment-thoughts</id>
  <updated>2015-06-17T00:00:00-00:00</updated>
  <published>2015-06-16T00:00:00-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;docker-images---storage--updating&quot;&gt;Docker Images - Storage &amp;amp; Updating&lt;/h1&gt;

&lt;p&gt;Store on S3?&lt;br /&gt;
	- Pros?&lt;br /&gt;
		1. AWS/S3&lt;br /&gt;
		2. Tool:	https://github.com/dogestry/dogestry&lt;br /&gt;
	- Cons: Tool, HTTPS,&lt;br /&gt;
Store on SSH Image Server&lt;br /&gt;
	- Pro:&lt;br /&gt;
		1. Standard, ubiquitous CLI tools, ssh or scp&lt;br /&gt;
		2. Any Existing CA/KI (Key Infrastructure) could be used&lt;/p&gt;

&lt;h1 id=&quot;setup-database-servers&quot;&gt;Setup Database Servers&lt;/h1&gt;

&lt;h2 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h2&gt;
&lt;p&gt;```&lt;br /&gt;
docker run –hostname mongo2 -d –name mongo2 -p 47017:27017 -v /mongodb2:/data mongo:latest bash -c ‘mongod –logpath /data/logs/mongodb.log –logappend –dbpath /data/collections –storageEngine=wiredTiger –replSet “rs0”’&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/docker/2015/06/16/docker-deployment-thoughts.html&quot;&gt;Docker Cluster Walkthrough&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 16, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Polyglot Redux]]></title>
 <link rel="alternate" type="text/html" href="/languages/2015/06/12/polyglot-redux.html" />
  <id>/languages/2015/06/12/polyglot-redux</id>
  <updated>2015-06-13 19:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-06-12T03:21:12-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;programming-languages-notes&quot;&gt;Programming Languages Notes&lt;/h1&gt;

&lt;h3 id=&quot;work-in-progress-updated-june-15th-2015&quot;&gt;&lt;em&gt;Work-in-progress (updated June 15th 2015)&lt;/em&gt;&lt;/h3&gt;

&lt;h3 id=&quot;im-sure-my-miscellaneous-observations-have-been-made-before-but-here-is-my-list-of-most-interesting-languages&quot;&gt;I’m sure my Miscellaneous Observations have been made before, but here is my list of most interesting languages:&lt;/h3&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;

&lt;h4 id=&quot;iojshttpiojsorg&quot;&gt;&lt;a href=&quot;http://iojs.org/&quot;&gt;io.js&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;#### &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.JS&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rust&quot;&gt;Rust&lt;/h2&gt;

&lt;h4 id=&quot;official-sitehttpwwwrust-langorg&quot;&gt;&lt;a href=&quot;http://www.rust-lang.org/&quot;&gt;Official Site&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Imagine if there was a language as powerful as C or C++, yet without the complexity/pitfalls that usually trap even the most skilled devs.&lt;/li&gt;
      &lt;li&gt;In fact I’d guess Rust is roughly as complex as the ES6 draft, with a ton of extra bonuses:
        &lt;ol&gt;
          &lt;li&gt;Essentially Rust transpiles from semi-dynamic syntax into &lt;strong&gt;pure C code&lt;/strong&gt;!&lt;/li&gt;
          &lt;li&gt;Including &lt;strong&gt;__all the best practices__&lt;/strong&gt; in C you would probably screw up on, I ~~eventually~~ always do.
            &lt;ul&gt;
              &lt;li&gt;Automatically you get:&lt;/li&gt;
              &lt;li&gt;Auto Memory management (no need for a slow garbage collector!)&lt;/li&gt;
              &lt;li&gt;Perfectly scoped Object ownership/locking (mutexting &amp;amp; context switching minimized)&lt;/li&gt;
              &lt;li&gt;Object lifetimes (automatically implemented*, and auto coded like you knew every edge case)&lt;/li&gt;
              &lt;li&gt;Prevent virtually all run time errors (seriously, your code-paths become explicit: you just can’t overlook a code-path)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Oh yeah, it throws in true language extensibility with a sensible ‘macro’ feature.
        &lt;ul&gt;
          &lt;li&gt;Need Comprehensions? &lt;a href=&quot;https://gist.github.com/hanny24/5749688&quot;&gt;Scala style? Done&lt;/a&gt;, and &lt;a href=&quot;https://gist.github.com/JeffBelgum/5e762761cd63c796e803&quot;&gt;Like Python? Done&lt;/a&gt;.
            &lt;ol&gt;
              &lt;li&gt;Too good to be true? Nah, It gets better:
                &lt;ul&gt;
                  &lt;li&gt;Bleeding edge indicators (github.com stats) reveal Rust is highly competitive or even beating Go (Google’s hot-newish language)&lt;/li&gt;
                  &lt;li&gt;About 4K More Stars than Go (currently around 12,200)&lt;/li&gt;
                  &lt;li&gt;More total Contributors ( 2x! - 1,071 vs. Go’s 479 )&lt;/li&gt;
                  &lt;li&gt;More forks ( 3X! - 2,343 vs. 765 )&lt;/li&gt;
                  &lt;li&gt;Number of Open Issues, Loses by a hair ( 2,000 vs 1,730 from Go )&lt;/li&gt;
                  &lt;li&gt;Pull Requests (Rust 70+ vs. Go’s 1)&lt;/li&gt;
                  &lt;li&gt;I had to triple check the numbers too.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Other libraries are very stable due to the constructs &amp;amp; rules of rust.&lt;/li&gt;
      &lt;li&gt;Threading model usable by mere mortals&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Decent &lt;strong&gt;web frameworks&lt;/strong&gt; are relatively new, untested, and usually undocumented (though they are &lt;strong&gt;getting&lt;/strong&gt; very impressive - as of March 2015).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Overwhelmingly complete assortment of algorithms are already implemented in Python ( see: scilearnkit, numpy, matplotlib, pil/pillow, etc. )&lt;/li&gt;
      &lt;li&gt;Very Fun to write! Comprehensions and Decomposition are great features and make other languages seem just weak!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Annoyingly, Python 2.x and 3.x are incompatible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;haskell&quot;&gt;Haskell&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Very rewarding when you finally memorize enough syntax to whip up comprehensions-based expressive patterns&lt;/li&gt;
      &lt;li&gt;You will learn mind-bending code patterns - often somewhat applicable to other languages.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Syntax &amp;amp; Patterns can be hard to get used to.&lt;br /&gt;
  -&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;smalltalk-80&quot;&gt;SmallTalk-80&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Incredibly simple compilers (original especially)&lt;/li&gt;
      &lt;li&gt;Great resources: &lt;a href=&quot;http://peter.michaux.ca/articles/smalltalk-mvc-translated-to-javascript&quot;&gt;Smalltalk MVC Translated to JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;You will likely never use this language for anything. Zero projects. However it will have more of an impact on your coding style, faster than other functional languages… This should be in the pros list)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;/languages/2015/06/12/polyglot-redux.html&quot;&gt;Polyglot Redux&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 12, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker rocks. Boot2docker just sucks.]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/06/10/docker-great-though-boot2docker-sucks.html" />
  <id>/docker/2015/06/10/docker-great-though-boot2docker-sucks</id>
  <updated>2015-06-15 04:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-06-10T23:00:12-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;h4 id=&quot;to-everyone-on-osx-or-windows-dont-let-boot2docker-leave-you-with-the-impression-that-docker-sucks-its-really-just-your-antique-os&quot;&gt;To everyone on OSX or Windows: Don’t let Boot2docker leave you with the impression that Docker sucks! It’s really just your antique OS.&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Docker is amazing, period.&lt;/li&gt;
  &lt;li&gt;However it’s rough-around-the-edges, hackey utility, boot2docker - for OS X, Windows and old Linux Kernels - leaves a &lt;strong&gt;lot&lt;/strong&gt; to be desired.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;issues&quot;&gt;Issues&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Boot2docker causes 99/100 headaches compared with using a native docker install locally.&lt;br /&gt;
I should concede that it wraps several other complicated/flakey technologies:&lt;br /&gt;
VirtualBox, x-platform Folder Sharing, and also the docker cli command runs in a network-client mode so,&lt;br /&gt;
file copying, builds etc take a long time  vs. running a native docker server.&lt;br /&gt;
=============&lt;br /&gt;
Docker can currently only run natively on a Linux Kernel 3.4+ - and the current boot2docker vm actually runs v4.&lt;br /&gt;
Bottom Line: Install the Latest Debian (w/ xfce or MATE) on your Mac/Windows box,&lt;br /&gt;
… c’mon those games aren’t helping your code…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;boot2docker-key-commands&quot;&gt;Boot2docker Key Commands&lt;/h1&gt;

&lt;h2 id=&quot;when-you-get-error-fata0000&quot;&gt;When you get error: ‘FATA[0000]’&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Full error message:
    &lt;ul&gt;
      &lt;li&gt;FATA[0000] Get http:///var/run/docker.sock/v1.18/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Solution: You need some info from boot2docker
    &lt;ul&gt;
      &lt;li&gt;Run this to get the 3 needed shell environment variables:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;boot2docker shellinit
# Copy &amp;amp; paste the exports into the current shell, &amp;amp; retry $(docker info)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;get-docker-server-ip-address&quot;&gt;Get Docker Server IP Address&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;boot2docker ip
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Now your app on port 3000 is available at something like: http://$(boot2docker ip):3000/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;boot2docker-quick-start-for-os-x&quot;&gt;Boot2Docker Quick Start for OS X&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;In a terminal on your &lt;code&gt;brew&lt;/code&gt; able Mac:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install boot2docker
boot2docker init
boot2docker up
&lt;/code&gt;&lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;/docker/2015/06/10/docker-great-though-boot2docker-sucks.html&quot;&gt;Docker rocks. Boot2docker just sucks.&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 10, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker Firewall Setup]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/06/06/docker-firewall-setup.html" />
  <id>/docker/2015/06/06/docker-firewall-setup</id>
  <updated>2015-06-15 04:50:00 -0600T00:00:00-00:00</updated>
  <published>2015-06-06T16:22:22-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;setup-docker-host-firewall&quot;&gt;Setup Docker Host Firewall&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Debian/Ubuntu Server is assumed&lt;/li&gt;
  &lt;li&gt;Designed to run on Docker Host Server&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-requirements&quot;&gt;Install Requirements&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Ultimate Firewall Needed
apt-get update &amp;amp;&amp;amp; apt-get install -y ufw nmap curl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;get-your-internal--external-ip-addresses&quot;&gt;Get your Internal &amp;amp; External IP Addresses&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Get your IP Addresses, simple output:
hostname --all-ip-addresses

# OR use ip tool, example:
ip addr
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;firtewall-ufw-setup---example-cmds&quot;&gt;Firtewall (UFW) Setup - Example Cmds&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Allow and log all new ssh connections,
ufw allow log proto tcp from any to any port 22
## Allow http traffic (w/o explicit logging)
ufw allow proto tcp from any to any port 80
ufw limit tcp/22 # Basic Rate limit 4 SSH brute force mitigation

# Dummy ext IP
export EXTERNAL_IP=123.123.123.123
# Note, default docker IP
export DOCKER_IP=172.17.42.1
# Forward tcp 8080 traffic to  Dockerized App
ufw allow proto tcp from $EXTERNAL_IP port 8080 to $DOCKER_IP port 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enable--start-firewall&quot;&gt;Enable / Start Firewall&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be Careful, Don’t Lock out your SSH port (sshd defaults to 22)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ufw enable
ufw reset
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;test-your-firewall&quot;&gt;Test Your Firewall&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Important: USE A REMOTE IP ADDR/LOCATION&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Verify dependency
apt-get update &amp;amp;&amp;amp; apt-get install -y nmap

# Set scan target
export TARGET_HOST=123.123.123.123

# Example Scan Commands:
# Fast open port check
nmap -p 1-10240,27017 -T5 $TARGET_HOST
# Thorough scan
nmap -p 1-10240,27017 --open -v -APN $TARGET_HOST
# Svc Inspection
nmap -p 1-10240,27017 -O --osscan-guess $TARGET_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;done-now-you-should-see-only-the-ports-you-configured&quot;&gt;DONE! Now you should see ONLY the ports you configured!&lt;/h4&gt;


    &lt;p&gt;&lt;a href=&quot;/docker/2015/06/06/docker-firewall-setup.html&quot;&gt;Docker Firewall Setup&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 06, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[JavaScript Magic]]></title>
 <link rel="alternate" type="text/html" href="/javascript/2015/06/06/javascript-scope-magic.html" />
  <id>/javascript/2015/06/06/javascript-scope-magic</id>
  <updated>2015-06-15 03:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-06-06T09:42:21-06:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;work-in-progress-includes-future-javascript-article-ideas-&quot;&gt;[ Work-in-progress, Includes Future JavaScript Article Ideas ]&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This post is geared to modern browsers and Node.JS/iojs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;imperative-vs-recursive-vs-functional&quot;&gt;Imperative vs. Recursive vs. Functional&lt;/h1&gt;

&lt;p&gt;Work-in-progress&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
// Imperative: The Fastest ( + very simple, no new pointers or excess allocs ):
function fib(n) {
  var a = 1, b = 1, c = 0;
  for(var i = 1; i &amp;lt; n-1; ++i) {
    c = a + b;
    a = b;
    b = c;
  }
  return b;
}

// Recursive: (FIREFOX or BABELJS Only) ES6 function definition with
//  parameter defaults used to set initial (internal/recursive) values
function fib(n, current=0, a=1, b=1, c=0) {
  current++;
  c = a + b;
  a = b;
  b = c;
  return current &amp;gt;= n ? b : fib(n, current, a, b, c);
}

// Text-book-Bad Example - poor function scope w/ multiple mutable external values
function fib(n) {
  if (!arr) { var arr = [1,1]; n=n-2; };// Bad
  if (n===-1) {return [arr[0]];}
  if (n===0) {return arr;}
  var proc = function() {
    --n;
    arr.push(arr[arr.length-1] + arr[arr.length-2]);
    return (n===0 ? arr : proc());
    // Bad: inner recursive function not needed, hint: variables used are from parent function scope
  };
  var ans = proc();
  return ans[ans.length-1];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;promises-awesome&quot;&gt;Promises: Awesome!&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;
// Example Using bluebird Promises and it&#39;s
var Promise = require(&#39;bluebird&#39;),
    fs = Promise.promisifyAll(require(&#39;fs&#39;)),
    less = Promise.promisifyAll(require(&#39;less&#39;));

function writeFileData(data) {
  return fs.writeFileAsync(&#39;/tmp/output.css&#39;, data);
}
// Bluebird makes something like this perhaps uncomfortably simple and succinct:
fs.readFileAsync(&#39;./style.less&#39;) // Call promisified readFile()
  .then(less.renderAsync)         // Hand off to less.render
  .then(writeFileData);      // Function to recieve the css contents (1st parameter)

&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;While, native ES6 Promises are great, I prefer the robust &lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md&quot;&gt;Bluebird Promise Library&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Library or not, modern browsers have supported Promise for years.&lt;/li&gt;
  &lt;li&gt;Promises can be utilized without crazy patterns - implicit &lt;code&gt;deferred&lt;/code&gt; is preferable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$q just sucks&lt;/strong&gt; just use bluebird, see above.&lt;/li&gt;
  &lt;li&gt;Worth mentioning: Bluebirds Benchmarks are best-case tests, so take note if doing crazy fancy promise chains&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;java-vs-javascript&quot;&gt;Java vs JavaScript&lt;/h1&gt;

&lt;h2 id=&quot;rate-limiting--debouncing--throttling&quot;&gt;Rate Limiting / Debouncing / Throttling&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;In JavaScript &lt;a href=&quot;http://davidwalsh.name/essential-javascript-functions&quot;&gt;David Walsh implemented debounce&lt;/a&gt; in less than 20 lines!&lt;/li&gt;
  &lt;li&gt;In Java, JDebounce, an library which is a lot more complicated, at ~500+ lines.&lt;/li&gt;
  &lt;li&gt;_ Comparing the two: _&lt;/li&gt;
  &lt;li&gt;The JavaScript is fast &amp;amp; uses first-class functions to achieve brilliant simplicity.&lt;/li&gt;
  &lt;li&gt;Whereas the Java has many more moving parts, annotations are used to apply behaviour at compile-time, and there’s a ton of XML, just for funsies!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;inversion-of-control-techniques&quot;&gt;Inversion of Control Techniques&lt;/h1&gt;

&lt;p&gt;Work-in-progress&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/javascript/2015/06/06/javascript-scope-magic.html&quot;&gt;JavaScript Magic&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on June 06, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker server Setup]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/04/05/docker-server-setup-notes.html" />
  <id>/docker/2015/04/05/docker-server-setup-notes</id>
  <published>2015-04-05T19:00:59-06:00</published>
  <updated>2015-04-05T19:00:59-06:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;docker-host-server-setup&quot;&gt;Docker &lt;strong&gt;Host Server&lt;/strong&gt; Setup&lt;/h1&gt;

&lt;h2 id=&quot;basic-monitoring-tools&quot;&gt;Basic Monitoring Tools&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Debian/BSD Requirements / Updates + monitoring tools: atop &amp;amp; htop
apt-get update &amp;amp;&amp;amp; apt-get install -y vim-nox git-core curl atop htop build-essential libssl-dev linux-image-amd64 linux-headers-amd64

# OSX, Debian &amp;amp; RHEL: Host OS Tuning
sysctl -w vm.max_map_count=262144

# Updates Profile init scripts before appending new scripts below
mkdir ~/backups
cp ~/.bash* ~/backups/

# Debian/BSD:  Append Shell Environment Shortcuts + XTERM Colors
curl -sSL https://gist.githubusercontent.com/justsml/882f6c7cee46aa71625f/raw/a4f0d1ed006080d5fe7f40b6e07b8eb9d6838a5f/.bashrc &amp;gt;&amp;gt; ~/.bashrc
curl -sSL https://gist.githubusercontent.com/justsml/b667f158731fd054cd38/raw/5778dbb5d3d138ccf99ae1bf973457ce89661362/.bash_aliases &amp;gt;&amp;gt; ~/.bash_aliases
# Read into current shell (login steps already missed the aliases file)
source ~/.bashrc

# Install Docker, straight from the horses mouth
curl -sSL https://get.docker.com/ | sh

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only for SELinux Enabled Systems&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# SELinux fixes (optional)
# chcon -Rt svirt_sandbox_file_t /mongodb
# chcon -Rt svirt_sandbox_file_t /elastic
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;simple-database-setupstartup&quot;&gt;Simple Database Setup/Startup&lt;/h1&gt;

&lt;h2 id=&quot;mongodb-v3-server&quot;&gt;MongoDB v3 Server&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mkdir /mongodb
docker run --name mongo -p 27017:27017 -v /mongodb:/data -d mongo:latest bash -c &#39;mongod --logpath /data/mongodb.log --logappend --dbpath /data/data --storageEngine=wiredTiger&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;elastic-search&quot;&gt;Elastic Search&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mkdir /elastic
docker run --name elastic -d -p 9200:9200 -p 9300:9300 -v /elastic:/data elasticsearch bash -c &#39;elasticsearch -Xmx 8g -Xms 2g --cluster.name elastic_cluster --node.name elastic01 --path.data /data/elastic-data --path.logs /data/elastic-logs &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You just lit up 2 database docker instances!!!&lt;br /&gt;
If it were any easier, I’m pretty sure you couldn’t invoice for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;package-up-your-nodejsrubypythonweb-app&quot;&gt;Package up your NodeJS/Ruby/Python/Web App&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Add a blank file named &lt;code&gt;Dockerfile&lt;/code&gt; in your project root.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Optional, Recommended)&lt;/em&gt; Add a &lt;code&gt;.dockerignore&lt;/code&gt; using .gitignore rules to exclude large non-essential paths. By default all project files are included.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-dockerfile&quot;&gt;Create a &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;# Example for NodeJS
FROM node:0.12
EXPOSE [3000]
COPY . /app/
WORKDIR /app
RUN apt-get update \
	&amp;amp;&amp;amp; apt-get dist-upgrade -y
RUN [&quot;npm&quot;, &quot;install&quot;]
# Overridable Command
CMD [&quot;npm&quot;, &quot;start&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s easier to show how to start using the Dockerfile and demonstrate the results via console (see commands below).&lt;/p&gt;

&lt;p&gt;In terminal, &lt;code&gt;cd&lt;/code&gt; to your project folder and run the following &lt;code&gt;build&lt;/code&gt; command &lt;em&gt;everytime&lt;/em&gt; you deploy changes - or want to change/upgrade OS or Env config)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build -t app-name-here .&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;docker-commands-to-learn&quot;&gt;Docker Commands to Learn&lt;/h1&gt;

&lt;h2 id=&quot;build-docker-image-every-deploychange&quot;&gt;Build Docker Image Every Deploy/Change&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker build -t app-name-here .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;createrun-web-app-w-links-to-db-servers&quot;&gt;Create/Run Web App w/ Links to DB Servers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -d --name webapp01 -p 3000:3000 --link mongo:mongo --link elastic:elastic app-name-here
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;run-interactively-non-daemon-in-terminal&quot;&gt;Run Interactively (non-daemon, in terminal)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -it --name webapp01 -p 3000:3000 --link mongo:mongo --link elastic:elastic app-name-here bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;delete-container-instance-or-image&quot;&gt;Delete Container Instance or Image&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Important: Any data not stored on the mounted volume path will be lost!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Delete Image
docker rmi -f app-name-here
docker rm -f webapp01
# now re-run your `docker run...` from ^^^
# So for example, let&#39;s kill your db instances above, run: ( start with something like `docker stop {mongo,elastic}` )
docker rm -f mongo elastic
&lt;/code&gt;&lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;/docker/2015/04/05/docker-server-setup-notes.html&quot;&gt;Docker server Setup&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on April 05, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Winning Design Resource]]></title>
 <link rel="alternate" type="text/html" href="/design/2015/02/26/amazing-resources.html" />
  <id>/design/2015/02/26/amazing-resources</id>
  <updated>2015-06-12 19:00:01 -0600T00:00:00-00:00</updated>
  <published>2015-02-26T04:42:21-07:00</published>
  
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;solve-2-ui-challenges&quot;&gt;Solve 2 UI challenges&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your Prototype Apps Suck: So sprinkle some awesome in there&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;beautiful-sliding-menus&quot;&gt;Beautiful Sliding Menus&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tympanus.net/Development/OffCanvasMenuEffects/cornerbox_nested.html&quot;&gt;Side-Menu Demo&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Not my code, however I’ve evaluated it and I have to say I &lt;strong&gt;rarely find code at this level&lt;/strong&gt;. Like, &lt;em&gt;never&lt;/em&gt;, folks.&lt;br /&gt;
The &lt;a href=&quot;http://tympanus.net/codrops/author/crnacura/&quot;&gt;author, Mary Lou&lt;/a&gt; is just incredibly talented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;impressive-tooltips&quot;&gt;Impressive Tooltips&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tympanus.net/codrops/2014/10/07/tooltip-styles-inspiration/&quot;&gt;View demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow! … Am I Right?&lt;/p&gt;

&lt;h3 id=&quot;misc&quot;&gt;Misc&lt;/h3&gt;

&lt;p&gt;I know I said it, but let me emphasize: All the &lt;strong&gt;code is extraordinarily well done&lt;/strong&gt;…  &lt;em&gt;I never say that, most devs rarely bother to be this meticulous&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Btw, I say ‘prototype apps’ merely because the examples need a few accessability/usability tweaks (which are described in Mary’s articles).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s where I found this stuff: &lt;a href=&quot;https://twitter.com/codrops&quot;&gt;follow codrops at https://twitter.com/codrops&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/design/2015/02/26/amazing-resources.html&quot;&gt;Winning Design Resource&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[AngularJS Tricks]]></title>
 <link rel="alternate" type="text/html" href="/angularjs/2015/02/26/stop-the-angularjs-hate.html" />
  <id>/angularjs/2015/02/26/stop-the-angularjs-hate</id>
  <published>2015-02-26T04:22:33-07:00</published>
  <updated>2015-02-26T04:22:33-07:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;angularjs-can-be-fast&quot;&gt;AngularJS CAN BE Fast!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lot’s of developers are discovering that their large AngularJS apps are buckling under the weight of all those &lt;code&gt;$watch&#39;s&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;way-data-binding-2-way-sword&quot;&gt;2-way data binding: 2-way Sword&lt;/h2&gt;

&lt;p&gt;2-way binding alone makes coming from other frameworks like Backbone, well, &lt;strong&gt;frickin amazeballs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The problem is: many sites &lt;strong&gt;chronically overuse&lt;/strong&gt; Angular’s design patterns.&lt;br /&gt;
This leads to directive sprawl and a &lt;code&gt;$scope/rootScope&lt;/code&gt; which easily has 1000’s of instances, and can cling to huge objects preventing any hope of effective garbage collection.&lt;/p&gt;

&lt;p&gt;You know where this is going: an exhausted browser! Forever doomed to work at a &lt;strong&gt;frantic pace&lt;/strong&gt; executing endless and redundant UI/DOM re-compiles.&lt;/p&gt;

&lt;p&gt;Does your &lt;code&gt;&amp;lt;current-user-status-label&amp;gt;&lt;/code&gt; directive really need to be, well, a directive at all?&lt;/p&gt;

&lt;h1 id=&quot;solutions&quot;&gt;Solutions&lt;/h1&gt;

&lt;h2 id=&quot;angular-tips&quot;&gt;Angular Tips&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Use 1-way binding ( e.g. &lt;code&gt;{ :: title }&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;Limit recursive nesting of directives&lt;/li&gt;
  &lt;li&gt;And if you must nest directives, &lt;em&gt;NEVER&lt;/em&gt; do so inside an &lt;code&gt;ng-repeat&lt;/code&gt; - Performance will start to inversely mirror something like &lt;code&gt;O(n^2)^3&lt;/code&gt; ;)&lt;br /&gt;
I. Use native JS/DOM code in a factory pattern to create basic DOM/UI fragments, examples: Modal msg box, status bar. Call UI factories from either directives or controllers.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Bonus:&lt;/em&gt; Understand cost and triggers of &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rendering/index?hl=en&quot;&gt;browser render lifecycle&lt;/a&gt;: animation, composite rendering, reflows&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;use-browserify-to-organize-project&quot;&gt;Use Browserify to Organize Project&lt;/h2&gt;

&lt;p&gt;Not specifically for Angular per-se, but essential for simple dependency resolution.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/substack/browserify-handbook/blob/master/readme.markdown#exports&quot;&gt;Browserify&lt;/a&gt; makes JS projects managable with virtually no added code overhead (ok, a few 100 chars).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/substack/browserify-handbook/blob/master/readme.markdown#exports&quot;&gt;Just read this section&lt;/a&gt; of the &lt;a href=&quot;https://github.com/substack/browserify-handbook/&quot;&gt;Browserify Handbook&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h1&gt;

&lt;h2 id=&quot;reactjshttpsfacebookgithubioreact-from-facebook&quot;&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; from Facebook&lt;/h2&gt;

&lt;p&gt;For views which need minimal description:&lt;br /&gt;
If you have tons of small reusable UI components - ReactJS might be a better choice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If your project…?:
    &lt;ul&gt;
      &lt;li&gt;Has a different philosophy to UI/DOM implementation than Angular&lt;/li&gt;
      &lt;li&gt;Already has some kind of ‘framework’ - You can &lt;strong&gt;use ReactJS alongside&lt;/strong&gt; AngularJS, Ember, Backbone.&lt;/li&gt;
      &lt;li&gt;Handles frequent data model changes in it’s own code, you’ll benefit by avoiding the ADHD digest/loop pattern of Angular&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;polymer-projecthttpwwwpolymer-projectorg-from-google&quot;&gt;&lt;a href=&quot;http://www.Polymer-Project.org/&quot;&gt;Polymer Project&lt;/a&gt; from Google&lt;/h2&gt;

&lt;h2 id=&quot;pure-er-js-approach&quot;&gt;Pure-er JS Approach&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;By the way, here’s where I try create framework agnostic code (+1 testability, +1 reuse)&lt;br /&gt;
      1. Use plain javascript class to load data (AJAX/JSONP/Embedded in page, et al.)&lt;br /&gt;
      1. Use mustache templating to create HTML strings (or DOM directly)&lt;br /&gt;
      1. Cache rendered content in localStorage if you can&lt;br /&gt;
      1. (Optional) Now add an event listener to re-render the content. I have standardized on the event name &lt;code&gt;refresh.&amp;lt;class-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;/angularjs/2015/02/26/stop-the-angularjs-hate.html&quot;&gt;AngularJS Tricks&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Docker === Love]]></title>
 <link rel="alternate" type="text/html" href="/docker/2015/02/26/docker-makes-everything-better.html" />
  <id>/docker/2015/02/26/docker-makes-everything-better</id>
  <published>2015-02-26T04:07:59-07:00</published>
  <updated>2015-02-26T04:07:59-07:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;docker-can-do-everything&quot;&gt;Docker Can Do Everything!*&lt;/h1&gt;

&lt;p&gt;Improve your process for:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Testing Dev Tools &amp;amp; Servers WITH VIRTUALLY ZERO risk of messing up dependencies on your PC&lt;/li&gt;
  &lt;li&gt;Testing your software&lt;/li&gt;
  &lt;li&gt;Makes you write more idempotent, modular code… (I’ll write how to actually realize this in a follow up)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There may seem like a huge volume of new stuff to learn, &lt;strong&gt;don’t let that stop you&lt;/strong&gt; from getting started.&lt;/p&gt;

&lt;h4 id=&quot;notes&quot;&gt;Notes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;If you see a &lt;code&gt;docker run&lt;/code&gt; command with either options &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;-it&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;-it&lt;/code&gt; or &lt;code&gt;-i -t&lt;/code&gt; will run the configured command interactively&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;-d&lt;/code&gt; will start the docker container as a ‘daemon’ aka background service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;examples&quot;&gt;EXAMPLES&lt;/h1&gt;

&lt;h2 id=&quot;nginx&quot;&gt;nginx&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;
	# Note: using host-based, shared folders
	#(shared folders are not possible with the VOLUME Dockerfile cmd)
	sudo docker run --name web01 -d -p 8181:80 \
		-v $(NGINX_DIR)/etc:/etc/nginx \
		-v $(NGINX_DIR)/log:/var/log/nginx \
		-v $(NGINX_DIR)/www:/var/www/html \
		nginx:latest

	# Local data, isolated within instance
	sudo docker run --name web01 -d -p 8181:80 nginx:latest

	# nodejs
	sudo docker run --name nodejs01 -d -p 3300:3300 -p 4433:4433 nodejs:latest

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Credits: &lt;a href=&quot;https://dockerfile.github.io/#/nginx&quot;&gt;https://dockerfile.github.io/#/nginx&lt;/a&gt;&lt;br /&gt;
Docker will make your life easier throughout the &lt;em&gt;entire&lt;/em&gt; SDLC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Pretty close&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;


    &lt;p&gt;&lt;a href=&quot;/docker/2015/02/26/docker-makes-everything-better.html&quot;&gt;Docker === Love&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 26, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Security Notes: RegEx]]></title>
 <link rel="alternate" type="text/html" href="/security/2015/02/23/security-notes-regex.html" />
  <id>/security/2015/02/23/security-notes-regex</id>
  <published>2015-02-23T22:42:21-07:00</published>
  <updated>2015-02-23T22:42:21-07:00</updated>
  <author>
    <name>Dan Levy</name>
    <uri></uri>
    <email>Dan@DanLevy.net</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;denial-of-service-regex-vulnerability&quot;&gt;Denial-of-Service Regex Vulnerability&lt;/h1&gt;

&lt;p&gt;One of the most common, and yet hard-to-spot vulnerabilities I encounter relate to regular expressions.&lt;br /&gt;
Either poorly written or poorly implemented.&lt;/p&gt;

&lt;h2 id=&quot;warning-signs&quot;&gt;Warning Signs&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;You have multiple capture groups&lt;/li&gt;
  &lt;li&gt;Global matching&lt;/li&gt;
  &lt;li&gt;Expression is used with un-checked user input&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mitigation--resolution&quot;&gt;Mitigation / Resolution&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;RegEx is hard
    &lt;ol&gt;
      &lt;li&gt;For example, here is how the really smart folks at &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository&quot;&gt;OWASP recommend handling IP validation&lt;/a&gt;: &lt;code&gt;^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;That’s longer than a tweet, for a 4-byte IP Address!!!&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Make sure user input isn’t unduly long, when I know input data is reliably less than 40 chars, I’ll make sure I prevent anything over 64 - otherwise, an attacker could overwhelm my system with a flood of 4Kb requests.&lt;/li&gt;
  &lt;li&gt;This affects almost every language and platform .NET/Node/Python/PERL/Java&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.liftsecurity.io/2014/11/03/regular-expression-dos-and-node.js?utm_source=nodeweekly&amp;amp;utm_medium=email&quot;&gt;Regular Expression DoS and Node.js&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/security/2015/02/23/security-notes-regex.html&quot;&gt;Security Notes: RegEx&lt;/a&gt; was originally published by Dan Levy at &lt;a href=&quot;&quot;&gt;www.DanLevy.net&lt;/a&gt; on February 23, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
